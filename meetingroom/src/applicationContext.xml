<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">
	<!-- 使用注解功能 -->
	<context:annotation-config />
	<!--导入数据源配置  -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
	<list>
	<value>classpath:database.properties</value>
	</list>
	</property>
	</bean>
	<!-- 数据源的属性配置 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- hibernate的回话工厂bean -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		 <property name="dataSource" ref="dataSource" /> 
		<property name="hibernateProperties">
			<props>
         <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop><!-- 使用的sql语言类别 -->
         <prop key="hibernate.show_sql">true</prop><!--是否在控制台显示hql语句  -->
       </props>
		</property>
		<property name="mappingResources"><!--模型属性与数据表的映射文件  -->
		<list>		
		<value>/com/meetingroom/model/User.hbm.xml </value> 
		<value>/com/meetingroom/model/Booked.hbm.xml </value> 
		<value>/com/meetingroom/model/Equipment.hbm.xml </value> 
		<value>/com/meetingroom/model/Has.hbm.xml </value> 
		<value>/com/meetingroom/model/Log.hbm.xml </value> 
		<value>/com/meetingroom/model/Meetingroom.hbm.xml </value> 
		<value>/com/meetingroom/model/Participated.hbm.xml </value> 
		</list>
		</property>
	</bean>
	<!--事务管理  -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
	<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	 <!-- 定义 Autowired  自动注入 bean -->
<!--     <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

 -->   
 <!-- 这个使用不明 -->
   <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 事务执行方式
                REQUIRED：指定当前方法必需在事务环境中运行，
                如果当前有事务环境就加入当前正在执行的事务环境，
                如果当前没有事务，就新建一个事务。
                这是默认值。 
             -->
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="import*" propagation="REQUIRED" />
            <!-- 
                指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 
                查询定义即可
                read-only="true"  表示只读
             -->
            <tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!-- dao -->
     <bean id="userDao" class="com.meetingroom.dao.impl.UserDaoImpl">
    <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="bookedDao" class="com.meetingroom.dao.impl.BookedDaoImpl">
    <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="meetingroomDao" class="com.meetingroom.dao.impl.MeetingroomDaoImpl">
    <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="hasDao" class="com.meetingroom.dao.impl.HasDaoImpl">
    <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="logDao" class="com.meetingroom.dao.impl.LogDaoImpl">
    <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="participatedDao" class="com.meetingroom.dao.impl.ParticipatedDaoImpl">
    <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="equipmentDao" class="com.meetingroom.dao.impl.EquipmentDaoImpl">
    <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
   <!-- Server -->
  	<bean id="userService" class="com.meetingroom.service.Impl.UserServiceImpl">
    <property name="userDao" ref="userDao"/>
    </bean>
    <bean id="bookedService" class="com.meetingroom.service.Impl.BookedServiceImpl">
    <property name="bookedDao" ref="bookedDao"/>
    </bean>
    <bean id="meetingroomService" class="com.meetingroom.service.Impl.MeetingroomServiceImpl">
    <property name="meetingroomDao" ref="meetingroomDao"/>
    </bean>
    <bean id="hasService" class="com.meetingroom.service.Impl.HasServiceImpl">
    <property name="hasDao" ref="hasDao"/>
    </bean>
    <bean id="logService" class="com.meetingroom.service.Impl.LogServiceImpl">
    <property name="logDao" ref="logDao"/>
    </bean>
    <bean id="participatedService" class="com.meetingroom.service.Impl.ParticipatedServiceImpl">
    <property name="participatedDao" ref="participatedDao"/>
    </bean>
     <bean id="equipmentSerivce" class="com.meetingroom.service.Impl.EquipmentServiceImpl">
    <property name="equipmentDao" ref="equipmentDao"/>
    </bean>
</beans>
